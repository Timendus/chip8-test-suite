# Flags test

# This is a visual adaptation of the math tests I wrote for Silicon8
# (https://github.com/Timendus/silicon8/tree/main/tests)

:macro opcode OPC {
  vD := OPC
  flags-draw-opcode
}

:macro expect-v0 V0VAL {
  i := flag-err
  if v0 == V0VAL then i := flag-ok
  y += 1
  x += 4
  sprite x y 3
  x += 9
  y -= 1
}

:macro expect-v2-vf V2VAL VFVAL {
  vE := vF
  vD := VFVAL
  vC := V2VAL
  x += 2
  flags-draw-results
  x += 3
}

:macro expect-v2-vf-v3 V2VAL VFVAL V3VAL {
  vE := vF
  vD := VFVAL
  vC := V2VAL
  flags-draw-results
  y += 1
  i := flag-err
  if v3 == V3VAL then i := flag-ok
  sprite x y 3
  y -= 1
  x += 5
}

: flags-draw-opcode
  i := im0
  vE := vD
  vF := 0xF0
  vE &= vF
  vE >>= vE
  vE >>= vE
  i += vE
  sprite x y 4
  x += 4
  i := im0
  vE := vD
  vF := 0x0F
  vE &= vF
  vE <<= vE
  vE <<= vE
  i += vE
  sprite x y 4
  x += 5
  return

: flags-draw-results
  i := flag-err
  if v2 == vC then i := flag-ok
  y += 1
  sprite x y 3
  x += 4
  i := flag-err
  if vE == vD then i := flag-ok
  sprite x y 3
  x += 4
  y -= 1
  return

: flags-test-after-keyrelease
  waitKeyRelease
: flags-test
  clear

  ## Without complications

  text 0 0 flags-no-carry
  x := 22
  y := 0

  v0 := 50
  v1 := 15

  # OR
  opcode 0x81
  v3 := 15
  vF := 20
  v3 |= vF # 31 (0x1F)
  v2 := v0
  v2 |= v1 # 63 (0x3F)
  expect-v2-vf-v3 63 0 31

  # AND
  opcode 0x82
  v3 := 15
  vF := 20
  v3 &= vF # 4 (0x04)
  v2 := v0
  v2 &= v1 # 2 (0x02)
  expect-v2-vf-v3 2 0 4

  y += 5
  x := 0

  # XOR
  opcode 0x83
  v3 := 15
  vF := 20
  v3 ^= vF # 27 (0x1B)
  v2 := v0
  v2 ^= v1 # 61 (0x3D)
  expect-v2-vf-v3 61 0 27

  # Addition (no overflow)
  opcode 0x84
  v3 := 15
  vF := 20
  v3 += vF # 35 (0x23)
  v2 := v0
  v2 += v1 # 65 (0x41)
  expect-v2-vf-v3 65 0 35

  # Subtraction in one direction (no carry)
  opcode 0x85
  v3 := 20
  vF := 15
  v3 -= vF # 5 (0x05)
  v2 := v0
  v2 -= v1 # 35 (0x23)
  expect-v2-vf-v3 35 1 5

  y += 5
  x := 0

  # Shift right (no LSB)
  opcode 0x86
  v2 := v0
  v2 >>= v2 # 25 (0x19)
  expect-v2-vf 25 0

  # Subtraction in the other direction (no carry)
  opcode 0x87
  v3 := 15
  vF := 20
  v3 =- vF # 5 (0x05)
  v2 := v1
  v2 =- v0 # 35 (0x23)
  expect-v2-vf-v3 35 1 5

  # Shift left (no MSB)
  opcode 0x8E
  v2 := v0
  v2 <<= v2 # 100 (0x64)
  expect-v2-vf 100 0


  # With complications

  text 0 16 flags-carry
  x := 22
  y := 16

  v0 := 200
  v1 := 100

  # Addition (with overflow)
  opcode 0x84
  v3 := 200
  vF := 100
  v3 += vF # 300 (0x2C)
  v2 := v0
  v2 += v1 # 300 (0x2C)
  expect-v2-vf-v3 0x2C 1 0x2C

  # Subtraction in one direction (with carry)
  opcode 0x85
  v3 := 15
  vF := 20
  v3 -= vF # -5 = 251 (0xFB)
  v2 := v1
  v2 -= v0 # 100 - 200 = -100 = 156 (0x9C)
  expect-v2-vf-v3 0x9C 0 0xFB

  y += 5
  x := 0

  # Shift right (with LSB)
  opcode 0x86
  v2 := 3
  v2 >>= v2 # 1 (0x1)
  expect-v2-vf 1 1

  # Subtraction in the other direction (with carry)
  opcode 0x87
  v3 := 20
  vF := 15
  v3 =- vF # -5 = 251 (0xFB)
  v2 := v0
  v2 =- v1 # 100 - 200 = -100 = 156 (0x9C)
  expect-v2-vf-v3 0x9C 0 0xFB

  # Shift left (with MSB)
  opcode 0x8E
  v2 := v0
  v2 <<= v2 # 400 (0x90)
  expect-v2-vf 0x90 1

  # Addition to i

  text 0 27 flags-other
  x := 22
  y := 27

  opcode 0xFE
  i := scratchpad
  v1 := 0x10
  i += v1
  v0 := 0xAA
  save v0
  i := scratchpad-plus-16
  load v0
  expect-v0 0xAA

  jump menu-after-keypress

#data

: flags-no-carry
  str "HAPPY" 0
: flags-carry
  str "CARRY" 0
: flags-other
  str "OTHER" 0
