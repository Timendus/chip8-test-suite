# Flags test

# This is a visual adaptation of the math tests I wrote for Silicon8
# (https://github.com/Timendus/silicon8/tree/main/tests)

:macro opcode-digit OPC {
  vD := OPC  
  flags-draw-opcode-digit
}

: flags-draw-opcode-digit
  i := im0
  vE := vD
  vE <<= vE
  vE <<= vE
  i += vE
  sprite x y 4
  x += 5
  return

:macro expect-v0 V0VAL {
  v2 := v0
  vC := V0VAL
  flags-draw-result
}

:macro expect-v2-vf-v3 V2VAL VFVAL V3VAL {
  vE := vF
  vC := V2VAL
  flags-draw-result
  v2 := vE
  vC := VFVAL
  flags-draw-result
  v2 := v3
  vC := V3VAL
  flags-draw-result  
}

:macro expect-v2-vf-v3-v4 V2VAL VFVAL V3VAL V4VAL {
  vE := vF
  vC := V2VAL
  flags-draw-result
  v2 := vE
  vC := VFVAL
  flags-draw-result
  v2 := v3
  vC := V3VAL
  flags-draw-result
  v2 := v4  
  vC := V4VAL
  flags-draw-result
}

: flags-draw-result
  i := flag-err
  if v2 == vC then i := flag-ok
  y += 1
  sprite x y 3
  x += 4
  y -= 1
  return

: flags-test
  clear

  ## Without complications

  text 0 0 flags-no-carry
  x := 22
  y := 0

  v0 := 50
  v1 := 15

  # OR
  opcode-digit 1 # 0x81
  v3 := 15
  vF := 20
  v3 |= vF # 31 (0x1F)
  vF := 0
  v2 := v0
  v2 |= v1 # 63 (0x3F)
  expect-v2-vf-v3 63 0 31
  x += 5

  # AND
  opcode-digit 2 # 0x82
  v3 := 15
  vF := 20
  v3 &= vF # 4 (0x04)
  vF := 0
  v2 := v0
  v2 &= v1 # 2 (0x02)
  expect-v2-vf-v3 2 0 4
  
  y += 5
  x := 0

  # XOR
  opcode-digit 0x3 # 0x83
  v3 := 15
  vF := 20
  v3 ^= vF # 27 (0x1B)
  vF := 0
  v2 := v0
  v2 ^= v1 # 61 (0x3D)
  expect-v2-vf-v3 61 0 27
  x += 5

  # Addition (no overflow)
  opcode-digit 0x4 # 0x84
  v3 := 15
  vF := 20
  vF += v3 # 35 (0x23), but should be overwritten by flag, so 0
  v4 := vF
  vF := 20
  v3 += vF # 35 (0x23)
  v2 := v0
  v2 += v1 # 65 (0x41)
  expect-v2-vf-v3-v4 65 0 35 0
  x += 1

  # Subtraction in one direction (no carry)
  opcode-digit 0x5 # 0x85
  v3 := 20
  vF := 25
  vF -= v3 # 5 (0x05), but should be overwritten by flag, so 1
  v4 := vF
  vF := 15 
  v3 -= vF # 5 (0x05)
  v2 := v0
  v2 -= v1 # 35 (0x23)
  expect-v2-vf-v3-v4 35 1 5 1

  y += 5
  x := 0

  # Shift right (no LSB)
  opcode-digit 0x6 # 0x86
  vF := v0
  vF >>= vF # 25 (0x19), but should be overwritten by flag, so 0
  v3 := vF
  v2 := v0
  v2 >>= v2 # 25 (0x19)
  expect-v2-vf-v3 25 0 0
  x += 5

  # Subtraction in the other direction (no carry)
  opcode-digit 0x7 # 0x87
  v3 := 15
  vF := 10
  vF =- v3 # 5 (0x5), but should be overwritten by flag, so 1
  v4 := vF
  vF := 20
  v3 =- vF # 5 (0x05)
  v2 := v1
  v2 =- v0 # 35 (0x23)
  expect-v2-vf-v3-v4 35 1 5 1
  x += 1

  # Shift left (no MSB)
  opcode-digit 0xE # 0x8E
  vF := v0
  vF <<= vF # 100 (0x64), but should be overwritten by flag, so 0
  v3 := vF
  v2 := v0
  v2 <<= v2 # 100 (0x64)
  expect-v2-vf-v3 100 0 0

  # With complications

  text 0 16 flags-carry
  x := 22
  y := 16

  v0 := 200
  v1 := 100

  # Addition (with overflow)
  opcode-digit 0x4 # 0x84
  v3 := 200
  vF := 100
  vF += v3 # 300 (0x2C), but should be overwritten by flag, so 1
  v4 := vF
  vF := 100
  v3 += vF # 300 (0x2C)
  v2 := v0
  v2 += v1 # 300 (0x2C)
  expect-v2-vf-v3-v4 0x2C 1 0x2C 1
  x += 1

  # Subtraction in one direction (with carry)
  opcode-digit 0x5 # 0x85
  v3 := 15
  vF := 10
  vF -= v3 # -5 = 251 (0xFB), but should be overwritten by flag, so 0
  v4 := vF
  vF := 20
  v3 -= vF # -5 = 251 (0xFB)
  v2 := v1
  v2 -= v0 # 100 - 200 = -100 = 156 (0x9C)
  expect-v2-vf-v3-v4 0x9C 0 0xFB 0

  y += 5
  x := 0

  # Shift right (with LSB)
  opcode-digit 0x6 # 0x86
  vF := 27
  vF >>= vF # 13 (0xD), but should be overwritten by flag, so 1
  v3 := vF
  v2 := 27
  v2 >>= v2 # 13 (0xD)
  expect-v2-vf-v3 13 1 1
  x += 5

  # Subtraction in the other direction (with carry)
  opcode-digit 0x7 # 0x87
  v3 := 20
  vF := 25
  vF =- v3 # -5 = 251 (0xFB), but should be overwritten by flag, so 0
  v4 := vF
  vF := 15
  v3 =- vF # -5 = 251 (0xFB)
  v2 := v0
  v2 =- v1 # 100 - 200 = -100 = 156 (0x9C)
  expect-v2-vf-v3-v4 0x9C 0 0xFB 0
  x += 1
  
  # Shift left (with MSB)
  opcode-digit 0xE # 0x8E
  vF := v0
  vF <<= vF # 400 (0x90), but should be overwritten by flag, so 1
  v3 := vF
  v2 := v0
  v2 <<= v2 # 400 (0x90)
  expect-v2-vf-v3 0x90 1 1

  # Addition to i

  text 0 27 flags-other
  x := 22
  y := 27

  opcode-digit 0xF # This block
  x -= 1           # draws
  opcode-digit 0xE # opcode 0xFE

  i := scratchpad
  v1 := 0x10
  i += v1
  v0 := 0xAA
  save v0
  i := scratchpad-plus-16
  load v0
  expect-v0 0xAA

  jump menu-after-keypress

:segment data

: flags-no-carry
  str "HAPPY" 0
: flags-carry
  str "CARRY" 0
: flags-other
  str "OTHER" 0
